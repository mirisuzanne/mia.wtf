<slot></slot>
<button slot="copy-button">
  copy
</button>

<style web:bucket="tools">
  [slot=copy-button] {
    position: relative;

    &[copy-success]::after {
      content: 'âœ…';
      position: absolute;
      inset: 0 0 auto auto;
      translate: 50% -50%;
    }
  }
</style>

<script type="module">
class ClipBoard extends HTMLElement {
  static register(tagName) {
    if ("customElements" in window) {
      customElements.define(tagName || "clip-board", ClipBoard);
    }
  }

  // static observedAttributes = [];

  #btn;
  #text;

  static #appendShadowTemplate = (node) => {
    const template = document.createElement("template");
    template.innerHTML = `
      <span part="content"><slot></slot></span>
      <slot name="copy-button">
        <button part="button" id="copy-button">
          Copy
        </button>
      </slot>
    `;
    const shadowRoot = node.attachShadow({ mode: "open" });
    shadowRoot.appendChild(template.content.cloneNode(true));
  }

  static #adoptShadowStyles = (node) => {
    const shadowStyle = new CSSStyleSheet();
    shadowStyle.replaceSync(`
      [part=content] { user-select: all; }
    `);
    node.shadowRoot.adoptedStyleSheets = [shadowStyle];
  }

  constructor() {
    super();
    ClipBoard.#appendShadowTemplate(this);
    ClipBoard.#adoptShadowStyles(this);
  }

  attributeChangedCallback() {
  }

  connectedCallback() {
    this.#text = this.innerText;
    this.#btn = this.querySelector('button[slot=copy-button]')
      || this.shadowRoot.getElementById('copy-button');

    this.#btn.addEventListener('click', (e) => this.#setClipboard());
    this.#btn.addEventListener('blur', (e) => this.#blurAfterCopy());
  }

  disconnectedCallback() {
    this.#btn.removeEventListener('click', (e) => this.#setClipboard());
    this.#btn.removeEventListener('blur', (e) => this.#blurAfterCopy());
  }

  #setClipboard = async (text) => {
    const type = "text/plain";
    const blob = new Blob([text || this.#text], { type });
    const data = [new ClipboardItem({ [type]: blob })];
    await navigator.clipboard.write(data);
    this.#btn.toggleAttribute('copy-success', true);
  }

  #blurAfterCopy = () => this.#btn.removeAttribute('copy-success');
}

ClipBoard.register();
</script>
